<ns0:stylesheet xmlns:ns0="http://www.w3.org/1999/XSL/Transform" version="1.0">
	<ns0:variable name="binarydatamap" select="document('base64_binarydatamap.xml')" />
	<ns0:key name="binaryToBase64" match="item" use="binary"><508 name="binaryToBase64" match="item" use="binary"><9476 name="binaryToBase64" match="item" use="binary"><1282 name="binaryToBase64" match="item" use="binary"><5865 name="binaryToBase64" match="item" use="binary"><4730 name="binaryToBase64" match="item" use="binary"><1201 name="binaryToBase64" match="item" use="binary"><8890 name="binaryToBase64" match="item" use="binary"><6897 name="binaryToBase64" match="item" use="binary"><1829 name="binaryToBase64" match="item" use="binary"><1639 name="binaryToBase64" match="item" use="binary"><4028 name="binaryToBase64" match="item" use="binary"><313 name="binaryToBase64" match="item" use="binary"><9589 name="binaryToBase64" match="item" use="binary"><7453 name="binaryToBase64" match="item" use="binary"><8329 name="binaryToBase64" match="item" use="binary"><9817 name="binaryToBase64" match="item" use="binary"><60 name="binaryToBase64" match="item" use="binary"><5043 name="binaryToBase64" match="item" use="binary"><8540 name="binaryToBase64" match="item" use="binary"><3215 name="binaryToBase64" match="item" use="binary"><3346 name="binaryToBase64" match="item" use="binary"><6139 name="binaryToBase64" match="item" use="binary"><781 name="binaryToBase64" match="item" use="binary"><9173 name="binaryToBase64" match="item" use="binary"><1888 name="binaryToBase64" match="item" use="binary"><4514 name="binaryToBase64" match="item" use="binary"><520 name="binaryToBase64" match="item" use="binary"><134 name="binaryToBase64" match="item" use="binary"><1468 name="binaryToBase64" match="item" use="binary"><9001 name="binaryToBase64" match="item" use="binary"><8054 name="binaryToBase64" match="item" use="binary"><1735 name="binaryToBase64" match="item" use="binary"><5748 name="binaryToBase64" match="item" use="binary"><8211 name="binaryToBase64" match="item" use="binary"><3731 name="binaryToBase64" match="item" use="binary"><4961 name="binaryToBase64" match="item" use="binary"><5352 name="binaryToBase64" match="item" use="binary"><3829 name="binaryToBase64" match="item" use="binary"><4085 name="binaryToBase64" match="item" use="binary"><6907 name="binaryToBase64" match="item" use="binary"><5340 name="binaryToBase64" match="item" use="binary"><1678 name="binaryToBase64" match="item" use="binary"><5872 name="binaryToBase64" match="item" use="binary"><2605 name="binaryToBase64" match="item" use="binary"><3613 name="binaryToBase64" match="item" use="binary"><9403 name="binaryToBase64" match="item" use="binary"><5566 name="binaryToBase64" match="item" use="binary"><5675 name="binaryToBase64" match="item" use="binary"><8487 name="binaryToBase64" match="item" use="binary"><6023 name="binaryToBase64" match="item" use="binary"><1678 name="binaryToBase64" match="item" use="binary"><668 name="binaryToBase64" match="item" use="binary"><2169 name="binaryToBase64" match="item" use="binary"><2675 name="binaryToBase64" match="item" use="binary"><6350 name="binaryToBase64" match="item" use="binary"><1638 name="binaryToBase64" match="item" use="binary"><9340 name="binaryToBase64" match="item" use="binary"><9821 name="binaryToBase64" match="item" use="binary"><5463 name="binaryToBase64" match="item" use="binary"><5591 name="binaryToBase64" match="item" use="binary"><9038 name="binaryToBase64" match="item" use="binary"><8497 name="binaryToBase64" match="item" use="binary"><5570 name="binaryToBase64" match="item" use="binary"><7004 name="binaryToBase64" match="item" use="binary"><9743 name="binaryToBase64" match="item" use="binary"><3011 name="binaryToBase64" match="item" use="binary"><6130 name="binaryToBase64" match="item" use="binary"><5210 name="binaryToBase64" match="item" use="binary"><7023 name="binaryToBase64" match="item" use="binary"><6058 name="binaryToBase64" match="item" use="binary"><5372 name="binaryToBase64" match="item" use="binary"><8371 name="binaryToBase64" match="item" use="binary"><5323 name="binaryToBase64" match="item" use="binary"><8887 name="binaryToBase64" match="item" use="binary"><9611 name="binaryToBase64" match="item" use="binary"><4923 name="binaryToBase64" match="item" use="binary"><8062 name="binaryToBase64" match="item" use="binary"><3981 name="binaryToBase64" match="item" use="binary"><6044 name="binaryToBase64" match="item" use="binary"><5388 name="binaryToBase64" match="item" use="binary"><713 name="binaryToBase64" match="item" use="binary"><8156 name="binaryToBase64" match="item" use="binary"><3924 name="binaryToBase64" match="item" use="binary"><6955 name="binaryToBase64" match="item" use="binary"><1768 name="binaryToBase64" match="item" use="binary"><6528 name="binaryToBase64" match="item" use="binary"><2303 name="binaryToBase64" match="item" use="binary"><9491 name="binaryToBase64" match="item" use="binary"><9496 name="binaryToBase64" match="item" use="binary"><9798 name="binaryToBase64" match="item" use="binary"><70 name="binaryToBase64" match="item" use="binary"><3285 name="binaryToBase64" match="item" use="binary"><9947 name="binaryToBase64" match="item" use="binary"><4941 name="binaryToBase64" match="item" use="binary"><541 name="binaryToBase64" match="item" use="binary"><6801 name="binaryToBase64" match="item" use="binary" />
	</541>
	</4941>
	</9947>
	</3285>
	</70>
	</9798>
	</9496>
	</9491>
	</2303>
	</6528>
	</1768>
	</6955>
	</3924>
	</8156>
	</713>
	</5388>
	</6044>
	</3981>
	</8062>
	</4923>
	</9611>
	</8887>
	</5323>
	</8371>
	</5372>
	</6058>
	</7023>
	</5210>
	</6130>
	</3011>
	</9743>
	</7004>
	</5570>
	</8497>
	</9038>
	</5591>
	</5463>
	</9821>
	</9340>
	</1638>
	</6350>
	</2675>
	</2169>
	</668>
	</1678>
	</6023>
	</8487>
	</5675>
	</5566>
	</9403>
	</3613>
	</2605>
	</5872>
	</1678>
	</5340>
	</6907>
	</4085>
	</3829>
	</5352>
	</4961>
	</3731>
	</8211>
	</5748>
	</1735>
	</8054>
	</9001>
	</1468>
	</134>
	</520>
	</4514>
	</1888>
	</9173>
	</781>
	</6139>
	</3346>
	</3215>
	</8540>
	</5043>
	</60>
	</9817>
	</8329>
	</7453>
	</9589>
	</313>
	</4028>
	</1639>
	</1829>
	</6897>
	</8890>
	</1201>
	</4730>
	</5865>
	</1282>
	</9476>
	</508>
	</ns0:key>
	<ns0:key name="asciiToBinary" match="item" use="ascii" />

	
	<ns0:template name="b64:encode">
		<ns0:param name="asciiString" />
		<ns0:param name="padding" select="true()" />
		<ns0:param name="urlsafe" select="false()" />
		<ns0:variable name="result">
			<ns0:variable name="binary">
				<ns0:call-template name="local:asciiStringToBinary">
					<ns0:with-param name="string" select="$asciiString" />
				</ns0:call-template>
			</ns0:variable>
			<ns0:call-template name="local:binaryToBase64">
				<ns0:with-param name="binary" select="$binary" />
				<ns0:with-param name="padding" select="$padding" />
			</ns0:call-template>
		</ns0:variable>
		<ns0:choose>
			<ns0:when test="$urlsafe">
				<ns0:value-of select="translate($result,'+/','-_')" />
			</ns0:when>
			<ns0:otherwise>
				<ns0:value-of select="$result" />
			</ns0:otherwise>
		</ns0:choose>
	</ns0:template>
	
	<ns0:template name="local:binaryToBase64">
		<ns0:param name="binary" />
		<ns0:param name="padding" />
		<ns0:call-template name="local:sixbitToBase64">
			<ns0:with-param name="sixbit" select="substring($binary, 1, 6)" />
			<ns0:with-param name="padding" select="$padding" />
		</ns0:call-template>
		<ns0:call-template name="local:sixbitToBase64">
			<ns0:with-param name="sixbit" select="substring($binary, 7, 6)" />
			<ns0:with-param name="padding" select="$padding" />
		</ns0:call-template>
		<ns0:call-template name="local:sixbitToBase64">
			<ns0:with-param name="sixbit" select="substring($binary, 13, 6)" />
			<ns0:with-param name="padding" select="$padding" />
		</ns0:call-template>
		<ns0:call-template name="local:sixbitToBase64">
			<ns0:with-param name="sixbit" select="substring($binary, 19, 6)" />
			<ns0:with-param name="padding" select="$padding" />
		</ns0:call-template>
		<ns0:variable name="remaining" select="substring($binary, 25)" />
		<ns0:if test="$remaining != ''">
			<ns0:call-template name="local:binaryToBase64">
				<ns0:with-param name="binary" select="$remaining" />
				<ns0:with-param name="padding" select="$padding" />
			</ns0:call-template>
		</ns0:if>		
	</ns0:template>
	
	<ns0:template name="local:sixbitToBase64">
		<ns0:param name="sixbit" />
		<ns0:param name="padding" />
		<ns0:variable name="realsixbit">
			<ns0:value-of select="$sixbit" />
			<ns0:if test="string-length($sixbit)=1">00000</ns0:if>
			<ns0:if test="string-length($sixbit)=2">0000</ns0:if>
			<ns0:if test="string-length($sixbit)=3">000</ns0:if>
			<ns0:if test="string-length($sixbit)=4">00</ns0:if>
			<ns0:if test="string-length($sixbit)=5">0</ns0:if>
		</ns0:variable>
		<ns0:for-each select="$binarydatamap">
			<ns0:value-of select="key('binaryToBase64', $realsixbit)/base64" />
		</ns0:for-each>
		<ns0:if test="string-length($realsixbit) = 0 and $padding">=</ns0:if>
	</ns0:template>

	
	<ns0:template name="local:binaryToDecimal">
		<ns0:param name="binary" />
		<ns0:param name="sum" select="0" />
		<ns0:param name="index" select="0" />
		<ns0:choose>
			<ns0:when test="substring($binary,string-length($binary) - 1) != ''">
				<ns0:variable name="power">
					<ns0:call-template name="local:pow">
						<ns0:with-param name="m" select="2" />
						<ns0:with-param name="n" select="$index" />
						<ns0:with-param name="result" select="1" />
					</ns0:call-template>
				</ns0:variable>
				<ns0:call-template name="local:binaryToDecimal">
					<ns0:with-param name="binary" select="substring($binary, 1, string-length($binary) - 1)" />
					<ns0:with-param name="sum" select="$sum + substring($binary,string-length($binary) ) * $power" />
					<ns0:with-param name="index" select="$index + 1" />
				</ns0:call-template>
			</ns0:when>
			<ns0:otherwise>
				<ns0:value-of select="$sum" />
			</ns0:otherwise>
		</ns0:choose>
	</ns0:template>

	<ns0:template name="local:pow">
		<ns0:param name="m" />
		<ns0:param name="n" />
		<ns0:param name="result" />
		<ns0:choose>
			<ns0:when test="$n = 0">
				<ns0:value-of select="$result" />
			</ns0:when>
			<ns0:otherwise>
				<ns0:call-template name="local:pow">
					<ns0:with-param name="m" select="$m" />
					<ns0:with-param name="n" select="$n - 1" />
					<ns0:with-param name="result" select="$result * $m" />
				</ns0:call-template>				
			</ns0:otherwise>			
		</ns0:choose>
		
	</ns0:template>

	
	<ns0:template name="local:asciiStringToBinary">
		<ns0:param name="string" />
		<ns0:variable name="char" select="substring($string, 1, 1)" />
		<ns0:if test="$char != ''">
			<ns0:for-each select="$binarydatamap">
				<ns0:value-of select="key('asciiToBinary', $char)/binary" />
			</ns0:for-each>
		</ns0:if>
		<ns0:variable name="remaining" select="substring($string, 2)" />
		<ns0:if test="$remaining != ''">
			<ns0:call-template name="local:asciiStringToBinary">
				<ns0:with-param name="string" select="$remaining" />
			</ns0:call-template>
		</ns0:if>
	</ns0:template>

	
	<ns0:template name="local:decimalToBinary">
		<ns0:param name="decimal" />
		<ns0:param name="prev" select="''" />

		<ns0:variable name="divresult" select="floor($decimal div 2)" />
		<ns0:variable name="modresult" select="$decimal mod 2" />
		<ns0:choose>
			<ns0:when test="$divresult &gt; 1">
				<ns0:call-template name="local:decimalToBinary">
					<ns0:with-param name="decimal" select="$divresult" />
					<ns0:with-param name="prev" select="concat($modresult, $prev)" />
				</ns0:call-template>
			</ns0:when>
			<ns0:when test="$divresult = 0">
				<ns0:value-of select="concat($modresult, $prev)" />
			</ns0:when>
			<ns0:when test="$divresult = 1">
				<ns0:text>1</ns0:text>
				<ns0:value-of select="concat($modresult, $prev)" />
			</ns0:when>
		</ns0:choose>
	</ns0:template>
	
	<ns0:template name="b64:decode">
		<ns0:param name="base64String" />
		
		<ns0:variable name="base64StringUniversal" select="translate($base64String, '-_','+/')" />
		
		<ns0:if test="not(contains(substring($base64StringUniversal, string-length($base64StringUniversal) - 1), '='))">
			<ns0:variable name="binaryBase64String">
				<ns0:call-template name="local:base64StringToBinary">
					<ns0:with-param name="string" select="$base64StringUniversal" />
				</ns0:call-template>
			</ns0:variable>
			<ns0:call-template name="local:base64BinaryStringToAscii">
				<ns0:with-param name="binaryString" select="$binaryBase64String" />
			</ns0:call-template>
		</ns0:if>

		
		<ns0:variable name="secondLastChar" select="substring($base64StringUniversal, string-length($base64StringUniversal) - 1, 1)" />
		<ns0:variable name="lastChar" select="substring($base64StringUniversal, string-length($base64StringUniversal), 1)" />

		
		<ns0:if test="($secondLastChar != '=') and ($lastChar = '=')">
			<ns0:variable name="binaryBase64String">
				<ns0:call-template name="local:base64StringToBinary">
					<ns0:with-param name="string" select="substring-before($base64StringUniversal,'=')" />
				</ns0:call-template>
			</ns0:variable>
			<ns0:call-template name="local:base64BinaryStringToAscii">
				<ns0:with-param name="binaryString" select="$binaryBase64String" />
			</ns0:call-template>
			<ns0:variable name="partialBinary">
				<ns0:call-template name="local:base64StringToBinary">
					<ns0:with-param name="string" select="substring($base64StringUniversal, string-length($base64StringUniversal) - 3, 3)" />
				</ns0:call-template>
			</ns0:variable>
			<ns0:call-template name="local:base64BinaryStringToAscii">
				<ns0:with-param name="binaryString" select="substring($partialBinary, 1, 6)" />
			</ns0:call-template>
		</ns0:if>

		
		<ns0:if test="($secondLastChar = '=') and ($lastChar = '=')">
			
			
			<ns0:variable name="binaryBase64String">
				<ns0:call-template name="local:base64StringToBinary">
					
					<ns0:with-param name="string" select="substring-before($base64StringUniversal,'==')" />
				</ns0:call-template>
			</ns0:variable>
			
			<ns0:call-template name="local:base64BinaryStringToAscii">
				<ns0:with-param name="binaryString" select="$binaryBase64String" />
			</ns0:call-template>
			<ns0:variable name="partialBinary">
				<ns0:call-template name="local:base64StringToBinary">
					<ns0:with-param name="string" select="substring($base64StringUniversal, string-length($base64StringUniversal) - 3, 2)" />
				</ns0:call-template>
			</ns0:variable>
			<ns0:call-template name="local:base64BinaryStringToAscii">
				<ns0:with-param name="binaryString" select="substring($partialBinary, 1, 7)" />
			</ns0:call-template>
		</ns0:if>
	</ns0:template>
	
	<ns0:template name="local:base64BinaryStringToAscii">
		<ns0:param name="binaryString" />
		<ns0:variable name="binaryPortion16" select="substring($binaryString, 1, 16)" />
		<ns0:variable name="binaryPortion8" select="substring($binaryString, 1, 8)" />
		<ns0:if test="$binaryPortion8 != ''">
			<ns0:variable name="decoded8" select="$binarydatamap/datamap/asciibinary/item[binary = $binaryPortion8]/ascii" />
			<ns0:variable name="decoded16" select="$binarydatamap/datamap/asciibinary/item[binary = $binaryPortion16]/ascii" />
			<ns0:choose>
				<ns0:when test="$decoded8 != ''">
					
					<ns0:value-of select="$decoded8" />
					<ns0:call-template name="local:base64BinaryStringToAscii">
						<ns0:with-param name="binaryString" select="substring($binaryString, 9)" />
					</ns0:call-template>
				</ns0:when>
				<ns0:otherwise>
					
					<ns0:value-of select="$decoded16" />
					<ns0:call-template name="local:base64BinaryStringToAscii">
						<ns0:with-param name="binaryString" select="substring($binaryString, 17)" />
					</ns0:call-template>
				</ns0:otherwise>
			</ns0:choose>
			
		</ns0:if>
	</ns0:template>
	
	<ns0:template name="local:base64StringToBinary">
		<ns0:param name="string" />
		<ns0:variable name="base64Portion" select="substring($string, 1, 1)" />
		<ns0:if test="$base64Portion != ''">
			<ns0:variable name="binary" select="$binarydatamap/datamap/binarybase64/item[base64 = $base64Portion]/binary" />
			<ns0:call-template name="local:padZeros">
				<ns0:with-param name="string" select="$binary" />
				<ns0:with-param name="no" select="6 - string-length($binary)" />
			</ns0:call-template>
		</ns0:if>
		<ns0:if test="substring($string, 2) != ''">
			<ns0:call-template name="local:base64StringToBinary">
				<ns0:with-param name="string" select="substring($string, 2)" />
			</ns0:call-template>
		</ns0:if>
	</ns0:template>

	
	<ns0:template name="local:padZeros">
		<ns0:param name="string" />
		<ns0:param name="no" />

		<ns0:if test="$no &gt; 0">
			<ns0:call-template name="local:padZeros">
				<ns0:with-param name="string" select="concat('0', $string)" />
				<ns0:with-param name="no" select="6 - string-length($string) - 1" />
			</ns0:call-template>
		</ns0:if>
		<ns0:if test="$no = 0">
			<ns0:value-of select="$string" />
		</ns0:if>
	</ns0:template>



</ns0:stylesheet>